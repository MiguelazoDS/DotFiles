#!/usr/bin/env bash

set -x

# Functions definition
# ======================================================================
function preset {
    printf "\nCreating mkinitcpio preset\n\n"
    {
        echo # mkinitcpio preset file for the 'linux-xanmod-$1' package

        echo "ALL_config=\"/etc/mkinitcpio.conf\""
        echo "ALL_kver=\"/boot/vmlinuz-xanmod-$1\""

        echo "PRESETS=('default' 'fallback')"

        echo "default_image=\"/boot/initramfs-xanmod-$1.img\""

        echo "fallback_image=\"/boot/initramfs-xanmod-$1-fallback.img\""
        echo "fallback_options=\"-S autodetect\""
    } >> /tmp/linux-xanmod-"$1".preset
    sudo mv /tmp/linux-xanmod-"$1".preset /etc/mkinitcpio.d/
}

function enable_nvme {
    sed -i '/# NVME Support/,/# Misc devices/{//!d}' .config
    sed -i 's/\(# NVME Support\)/\1\n/g' .config
    line=$(cat -n .config | grep "# NVME" | awk '/[0-9]+/ {print (($1+1))}')
    sed -i "${line}iCONFIG_NVME_CORE=m" .config
    sed -i "${line}iCONFIG_BLK_DEV_NVME=m" .config
    sed -i "${line}iCONFIG_NVME_MULTIPATH=y" .config
    sed -i "${line}iCONFIG_NVME_HWMON=y" .config
    sed -i "${line}iCONFIG_NVME_FABRICS=m" .config
    sed -i "${line}iCONFIG_NVME_FC=m" .config
    sed -i "${line}iCONFIG_NVME_TCP=m" .config
    sed -i "${line}iCONFIG_NVME_TARGET=m" .config
    sed -i "${line}iCONFIG_NVME_TARGET_PASSTHRU=y" .config
    sed -i "${line}iCONFIG_NVME_TARGET_LOOP=m" .config
    sed -i "${line}iCONFIG_NVME_TARGET_FC=m" .config
    sed -i "${line}iCONFIG_NVME_TARGET_TCP=m" .config
}

function build_and_install {
    ROOT=$(pwd)
    sudo snapper -c root create -d "Before installing Xanmod kernel"
    nvidia_version="$(nvidia-smi | awk '/NVIDIA-SMI/ {printf $3}')"
    vboxhost_version="$(virtualbox --help | head -n 1 | sed 's/.*v\([0-9]*\)/\1/')_OSE"
    xanmod_version=$(grep -E "(VERSION =.*|PATCHLEVEL =.*|SUBLEVEL =.*)" Makefile | head -n 3 | grep -E -o '[0-9]*' | tr '\n' '.')
    xanmod_version=${xanmod_version:0:-1}$(cat localversion)
    version="$(echo $xanmod_version | cut -d '-' -f 1 | sed 's/\.//g')"

    hash flex 2> /dev/null
    [[ $? -eq 1 ]] && (printf "\nInstalling flex\n"; yay -S flex)

    sudo bash -c ""

    # Build
    make olddefconfig
    make LSMOD="$HOME"/.config/modprobed.db localmodconfig
    enable_nvme
    make -j"$(nproc)" bzImage
    make -j"$(nproc)" modules
    make -j"$(nproc)" headers

    # Install
    sudo make -j"$(nproc)" modules_install
    sudo make -j"$(nproc)" headers_install
    sudo cp -i arch/x86/boot/bzImage /boot/vmlinuz-xanmod-"$version"
    preset "$version"
    sudo mkinitcpio -p linux-xanmod-"$version"
    sudo dkms install nvidia/"$nvidia_version" -k "$xanmod_version"
    sudo dkms install vboxhost/"$vboxhost_version" -k "$xanmod_version"
    sudo grub-mkconfig -o /boot/grub/grub.cfg

    cd "$ROOT" || exit
    printf "\nNeeds reboot\n"
}

function download_and_configure_xanmod {
    local latest_release=$1
    local config_file=./.config
    printf "\nDownloading kernel source code\n"
    cd "$HOME/Documents" || exit
    hash wget 2> /dev/null
    [[ $? -eq 1 ]] && (printf "\nInstalling wget\n"; yay -S wget)
    wget "$latest_release"
    printf "\nExtracting kernel source code\n"
    release_basename=$(basename $latest_release)
    tar xfj "$release_basename" -C "linux"
    rm "$release_basename"
    cd linux/*
    config_template="CONFIGS/xanmod/gcc/config_x86-64-v1"
    ls ${config_template} 2>& /dev/null
    if [ $? -ne 0 ]; then
      config_template="CONFIGS/x86_64/config"
    fi
    cp ${config_template} ${config_file}
    printf "\nUnset local version"
    sed -i 's/\(CONFIG_LOCALVERSION=\).*/\1""/g' ${config_file}
    printf "\nIce Lake Processor Family Set\n"
    sed -i 's/\(CONFIG_GENERIC_CPU\)=.*/\# \1 is not set/g' ${config_file}
    sed -i 's/.*\(CONFIG_MSKYLAKE\) is not set/\1=y/' ${config_file}
    printf "\nEnable MSR\n"
    sed -i 's/.*\(CONFIG_X86_MSR\)=.*/\1=y/' ${config_file}
}

function get_source_code {
    local url=$(curl -L xanmod.org | grep -A 20 "Stable Mainline" | grep -B 1 "Source" | tr -d '\n' | grep -o "https.*\" ")
    echo "${url:0:-2}"
}

# ===========================================================================================
# START
# ===========================================================================================
major="$(curl https://xanmod.org/ | grep -A 1 "Stable Mainline" | tail -n 1 | sed 's/<td>\(.*\)<\/td>/\1/')"
linux_dir=$HOME/Documents/linux
rm -rf "$linux_dir"
mkdir "$linux_dir"

url=$(get_source_code)
download_and_configure_xanmod "$url"
linux_dir="$(find "$HOME"/Documents/ -maxdepth 1 -regex "$HOME/Documents/linux.*$")"
build_and_install "$major" "$xanmod_info" "$linux_dir"

