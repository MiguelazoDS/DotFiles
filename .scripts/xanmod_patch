#!/usr/bin/env bash

function usage {
	printf "Usage: \n\txanmod_patch [Options]\n"
	printf -- "\t-o d for dry-run, -o p for patch, -o i for install and -o c for clean"
	printf "\nOptions: \n"
	printf -- "\t-o <value> --option <value>\n"
}

function preset {
	printf "\nCreating mkinitcpio preset\n\n"
	sudo tee /etc/mkinitcpio.d/linux-xanmod-"$1".preset <<-EOF
	# mkinitcpio preset file for the 'linux-xanmod-$1' package

	ALL_config="/etc/mkinitcpio.conf"
	ALL_kver="/boot/vmlinuz-xanmod-$1"

	PRESETS=('default' 'fallback')

	#default_config="/etc/mkinitcpio.conf"
	default_image="/boot/initramfs-xanmod-$1.img"
	#default_options=""

	#fallback_config="/etc/mkinitcpio.conf"
	fallback_image="/boot/initramfs-xanmod-$1-fallback.img"
	fallback_options="-S autodetect"
	EOF
}

function output {
	printf "\nRelease installed: %s\nKernel patch installed: %s\n" "$release" "$patch"
}

function new {
	url_xanmod=$1
	bn_xanmod=$2
	printf "\nDownloading kernel tarball\n"
	old_path=$(pwd)
	cd "$HOME/Documents" || exit
	wget "$url_xanmod"
	tar xfv "$bn_xanmod"
	mv xanmod-linux* linux-"$bn_xanmod"
	# Change Generic by Ice Lake processor family
	printf "\nIce Lake Processor Family Set\n"
	sed -i 's/\(CONFIG_GENERIC_CPU\)=.*/\# \1 is not set/g' linux-"$bn_xanmod"/.config
	sed -i 's/.*\(CONFIG_MSKYLAKE\).*/\1=y/g' linux-"$bn_xanmod"/.config
	cd "$old_path" || exit
}

function install {
	linux_dir=$1
	major=$2
	patch=$3
	nvidia_version=$4
	release=$5

	sudo bash -c ""
	cd "$linux_dir" || exit
	make oldconfig
	make LSMOD="$HOME"/.config/modprobed.db localmodconfig
	make -j"$(nproc)" bzImage
	make -j"$(nproc)" modules
	sudo make -j"$(nproc)" modules_install
	version="$(echo "$major$patch" | sed 's/\.//g')"
	sudo cp -i arch/x86/boot/bzImage /boot/vmlinuz-xanmod-"$version"
	preset "$version"
	sudo mkinitcpio -p linux-xanmod-"$version"
	sudo dkms install nvidia/"$nvidia_version" -k "$major$patch-xanmod1"
	sudo grub-mkconfig -o /boot/grub/grub.cfg
	cd "$HOME" || exit
	if [[ "$linux_dir" != "$(echo "$linux_dir" | sed "s/\(\.*\)$release\(-xanmod1\)/\1$patch\2/g")" ]]; then
		mv "$linux_dir" "$(echo "$linux_dir" | sed "s/\(\.*\)$release\(-xanmod1\)/\1$patch\2/g")"
	fi
	printf "\nNeeds reboot\n"
}

function patching {
	url_patch=$1
	linux_dir=$2

	echo "$url_patch"
	echo "$linux_dir"
	hash wget 2>/dev/null
	[[ $? -eq 1 ]] && (printf "\nwget not installed\nInstalling"; yay -S wget)
	wget -q "$url_patch"
	xz --decompress ./*.xz
	printf "\n\nPatching kernel\n"
	old_path=$(pwd)
	cd "$linux_dir" || exit
	file=$(ls "$old_path"/*--*)
	echo file "$file"
	echo linux dir "$linux_dir"
	patch -p1 < "$file"
	head -n 5 Makefile
	cd "$old_path" || exit
	printf "\n\nRemove patch\n"
	trm ./*--*
	patch=$(head -n 5 "$linux_dir"/Makefile | awk '/SUBLEVEL/ {print $3}')
	output
}

if [ "$#" -lt 2 ]; then
	usage
	exit 0
fi

short=o:
long=option:

if ! getopt -n "$0" -o $short --long $long -- "$@" >/dev/null
then
	exit 1
fi

while true;
do
	case "$1" in
		-o | --option )
			shift
			option=$1
			shift
			;;
		* )
			shift
			break
			;;
	esac
done

major="5.10."
#Two digits number
release="$(uname -r | sed "s/$major\([0-9]*\)-.*/\1/")"
#lts or xanmod? (? = 1 or 2)
kernel="$(uname -r | sed "s/$major$release.*-\(.*\)/\1/")"
#Directories to clean
#================================================================
nvidia_dir="/var/lib/dkms/nvidia"
boot_dir="/boot"
modules_dir="/usr/lib/modules"
mkinitcpio_dir="/etc/mkinitcpio.d"
#===================================================================
nvidia_version="$(nvidia-smi | awk '/NVIDIA-SMI/ {print $3}')"
info=url=$(curl -u MiguelazoDS:"$(cat ~/.scripts/github_token)" "https://api.github.com/repos/xanmod/linux/releases")
if [[ "$kernel" != "lts" ]]; then
	url_patch=$(echo "$info" | grep -E "browser_download_url.*${major}[0-9]{2}-xanmod1.*\/.*$release.*--.*" | cut -d'"' -f4)
fi
url_xanmod=$(echo "$info" | grep -E "tarball_url.*${major}${release}.*" | head -1 | cut -d '"' -f4)
bn_xanmod=$(basename "$url_xanmod")
exist=$(ls "$HOME"/Documents/linux-*xanmod* 2>/dev/null)
if [[ -z $exist ]]; then
	printf "\nThere's no kernel folder\n"
	new "$url_xanmod" "$bn_xanmod"
fi
	linux_dir=$(find $HOME/Documents/ -name "linux*xanmod*")
	patch=$(head -n 5 "$linux_dir"/Makefile | awk '/SUBLEVEL/ {print $3}')

if [[ "$option" == "p" ]]; then
	if [[ "$release" == "$patch" ]] && [[ -n "$url_patch" ]]; then
		patching "$url_patch" "$linux_dir"
	else
		printf "\nNothing to do\n"
		output
	fi
elif [[ $option == "d" ]]; then
	if [[ "$kernel" != "lts" ]]; then
		if [[ -n "$url_patch" ]]; then
			printf "\nPatch available\n\n%s\n" "$url_patch"
		else
			printf "\nThere's no patch available\n"
		fi
		output
	else
		printf "\nCurrently not running any version of xanmod kernel\n"
	fi
elif [[ "$option" == "i" ]]; then
	if [[ "$release" != "$patch" ]] || [[ "$kernel" == "lts" ]]; then
		install "$linux_dir" "$major" "$patch" "$nvidia_version" "$release"
	else
		printf "\nNothing to do\n"
		output
	fi
elif [[ "$option" == "c" ]]; then
	#Clean every first day of the month at 20:00
	#0 20 1 * * /home/miguel/.scripts/xanmod_patch -o c   AS ROOT
	#1 20 1 * * /home/miguel/.scripts/xanmod_patch -o l   AS USER
	exec 3>&1 &> >(tee -a /tmp/xanmod_clean_logs)
	version="$(echo "$major$release" | sed 's/\.//g')"
	find "$modules_dir" -maxdepth 1 -mindepth 1 ! -name "*${major}${release}*xanmod*" ! -name "*lts*" -exec rm -rv {} +
	find "$boot_dir" -maxdepth 1 -mindepth 1 ! -name '*grub*' ! -name '*amd*' ! -name '*lts*' ! -name "*$version*" -exec rm -rv {} +
	find "$nvidia_dir" -maxdepth 1 -mindepth 1 ! -name "*$nvidia_version*" ! -name '*original*' ! -name '*lts*' ! -name "*$major$release*" -delete
	find "$nvidia_dir/$nvidia_version" -maxdepth 1 -mindepth 1 ! -name 'source' ! -name '*lts*' ! -name "*$major$release*" -exec rm -rv {}
	find "$mkinitcpio_dir" -maxdepth 1 -mindepth 1 ! -name "*$version*" ! -name '*lts*' -delete
	trash-empty
	sudo grub-mkconfig -o /boot/grub/grub.cfg 2>&3
elif [[ "$option" == "l" ]]; then
	[[ -f /tmp/xanmod_clean_logs ]] && (notify-send.sh -t 5000 "Clean Xanmod Kernel Directories" "$(cat /tmp/xanmod_clean_logs)"; trm /tmp/xanmod_clean_logs)
else
	printf "\nThe option is not valid.\n"
	exit 1
fi
